<?php
// $Id$
/**
 * @file
 * API of commonly needed services, like centralized authentication.
 *
 * @todo externalize strings, manage in drupal admin screens
 * 
 */

/**
 * Implementation of hook_help()
 */
function cul_common_help($path, $arg) {
    if ($path == 'admin/help#cul_common') {
        $txt = 'API of commonly needed services, like centralized authentication.';
    }
    return '<p>' . t($txt) . '</p>';
}

/**
 * Implementation of hook_menu()
 */
function cul_common_menu() {
  $items['cul_common.voyager'] = array(
    'title' => 'Voyager Patron Data',
    'page callback' => 'get_voyager_patron_json',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['cul_common.ldap'] = array(
    'title' => 'LDAP Patron Data',
    'page callback' => 'get_ldap_json',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['cul_common.logout'] = array(
    'title' => 'CUWebAuth Logout',
    'page callback' => 'cuwebauth_logout_from_url',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Don't bother admins or various content managers with authentication
 * when they are already authenticated with Drupal.
 */
function can_bypass_auth($roles = NULL) {
  if ($roles == NULL || ! is_array($roles)) {
    $roles = array('administrator', 'content manager', 'webvision-admin', 'faq-manager');
  }

  $can_bypass = FALSE;
  global $user;

  if (is_array($user->roles)) {
    foreach ($roles as $role) {
      if (in_array($role, array_values($user->roles))) {
        $can_bypass = TRUE;
        break;
      }
    }
  }

  return $can_bypass;
}

/**
 * Basic authentication method, redirects to a CUWebAuth protected directory,
 * and upon successful authentication, it will set a 'netid' cookie.
 */
function cu_authenticate() {
  if (isset($_COOKIE['netid'])) {
    return $_COOKIE['netid'];
  } else {
    $base_path = 'basepath=' . base_path() . '&';
    drupal_goto('http://'. $_SERVER['HTTP_HOST'] . base_path() . drupal_get_path('module', 'cul_common') . '/authenticate' , $base_path . drupal_get_destination());
  }
}

/**
 * Simulate a CUWebAuth logout.
 */
function cuwebauth_logout($logout_url=NULL) {
  unset($_COOKIE['netid']);
  if ($logout_url) {
    drupal_goto($logout_url);
  }
}

/**
 * Call cuwebauth_logout() from client.
 */
function cuwebauth_logout_from_url() {
  $logout_url = NULL;
  if (isset($_GET['$logout_url'])) {
    $logout_url = $_GET['$logout_url'];  
  }
  cuwebauth_logout($logout_url);
}

/**
 * Implementation of hook_form_alter()
 */
function cul_common_form_alter(&$form, $form_state, $form_id) {
  if (isset($form['#node']) && can_bypass_auth()) {
      $node = $form['#node'];
      $form['cuwebauth'] = array (
        '#type' => 'checkbox',
        '#title' => 'Require CUWebLogin?',
        '#default_value' => isset($node->cuwebauth) ? $node->cuwebauth : 0,
        '#weight' => -10,
      );
  }
}

function get_cuwebauth($node) {
    return db_result(db_query('SELECT nid FROM {cuwebauth} where nid = (%d)', $node->nid));
}

function manage_cuwebuath($node) {
   $cuwebauth = get_cuwebauth($node);
   if ($node->cuwebauth && ! $cuwebauth) {
     db_query('INSERT INTO {cuwebauth} (nid) VALUES (%d)', $node->nid); 
   } else if (! $node->cuwebauth && $cuwebauth) {
     db_query('DELETE FROM {cuwebauth} WHERE nid = %d', $node->nid);
   }
}

/**
 * Implementation of hook_nodeapi().
 *
 * We will implement several node API operations here. This hook allows us to
 * act on all major node operations, so we can manage our additional data
 * appropriately.
 */
function cul_common_nodeapi(&$node, $op, $teaser, $page) {
  switch ($op) {
    case 'load':
      return array('cuwebauth' => get_cuwebauth($node));
      break;
    case 'insert':
      manage_cuwebuath($node);
      break;
    case 'update':
      manage_cuwebuath($node);
      break;
    case 'delete':
      manage_cuwebuath($node);
      break;
    case 'view':
      if (get_cuwebauth($node) && ! isset($_COOKIE['netid']) && ! can_bypass_auth()) {
        cu_authenticate();
      } 
      break;
  }
}


function _set_oracle_error_message($message, $stid=0) {
  if ($stid) {
    $err = oci_error($stid);
  } else {
    $err = oci_error();
  }
  $message ='ERROR: ' . $message . ' ' . $err['message'];
  watchdog('cul_common (voyager database)', $message, array(), WATGHDOG_ERROR);
}

function get_voyager_connection() {
  if ($conn = oci_connect("dbread", "dbread", "//lib22-c.library.cornell.edu:1521/VGER")) {
    return $conn;
  } else {
    _set_oracle_error_message('Oracle could not establish a connection.');
    return null;
  }
}


/**
 * Voyager query handling code
 */
function _get_voyager_patron_data() {
  $output = null;
  if ($conn = get_voyager_connection()) {
    $netid  = cu_authenticate();
    $email  = $netid . '@cornell.edu';
    $query = "SELECT p.patron_id, pb.patron_barcode, p.first_name, p.last_name
              FROM   patron_barcode pb, patron_address pa, patron p
              WHERE  pa.address_line1 = :email
              AND    pb.barcode_status = 1
              AND    pb.patron_id = pa.patron_id
              AND    pb.patron_id = p.patron_id";

    $stid = oci_parse($conn, $query);
    oci_bind_by_name($stid, ":email", $email);
    oci_define_by_name($stid, "PATRON_ID", $pid);
    oci_define_by_name($stid, "PATRON_BARCODE", $bc);
    oci_define_by_name($stid, "FIRST_NAME", $fn);
    oci_define_by_name($stid, "LAST_NAME", $ln);

    $output = array();
    if (oci_execute($stid, OCI_DEFAULT)) {
      while (oci_fetch($stid)) {
        $output['patron_id'] = $pid;
        $output['patron_barcode'] = $bc;
        $output['first_name'] = $fn;
        $output['last_name'] = $ln;
      }
    } else {
      _set_oracle_error_message('Query failed', $stid);
    }
    oci_close($conn);
  }
  return $output;
}

/**
 * Given a CU Net ID, retrieve patron data from Voyager.
 * 
 * Cached results are retrieved unless a refresh is forced.
 * 
 */
function get_voyager_patron_data($force_refresh=FALSE) {
  $netid = cu_authenticate();
  $output = db_fetch_array(db_query('SELECT patron_id, patron_barcode, first_name, last_name FROM {cache_patron_data} where netid = "%s"', $netid));
  
  if (! $output) {
    $output = _get_voyager_patron_data();
    if ($output) {
      db_query('INSERT INTO {cache_patron_data} (netid, patron_id, patron_barcode, first_name, last_name) VALUES ("%s", %d, "%s", "%s", "%s")', $netid, $output['patron_id'], $output['patron_barcode'], $output['first_name'], $output['last_name']);
    }
  } else {
      if ($force_refresh) {
        $output = _get_voyager_patron_data();
        db_query('update {cache_patron_data} set patron_id = %d, patron_barcode = "%s", first_name = "%s", last_name = "%s" where netid = "%s"', $output['patron_id'], $output['patron_barcode'], $output['first_name'], $output['last_name'], $netid);
      }
  }
  return $output;
}

/**
 * Call get_voyager_patron_data() via URL, return JSON.
 * 
 */
function get_voyager_patron_json() {
  $force_refresh = FALSE;
  if (isset($_GET['force_refresh']) && $_GET['force_refresh']) {
    $force_refresh = TRUE;  
  }
  drupal_json(get_voyager_patron_data($force_refresh));
}

/**
 * Given a CU Net ID, retrieve patron data from Cornell LDAP directory.
 * 
 * For a complete list of publicly available attributes and their definitions, see
 * @link http://identity.cit.cornell.edu/ds/index.html .
 *
 */
function get_ldap_data($return_fields=NULL, $netid=NULL) {
  if ($netid == NULL) {
    $netid = cu_authenticate();
  }
  $output = NULL;

  if ($return_fields == NULL) {
    $return_fields = array('eduPersonPrimaryAffiliation',
                           'cornellEduAcadCollege',
                           'givenName',
                           'sn',
                           'cornellEduCampusAddress',
                           'cornellEduCampusPhone',
                           'Mail',
                         );
  } else if (is_string($return_fields)) {
    $return_fields = split(',', $return_fields);   
  }

  if ($ds=ldap_connect("directory.cornell.edu")) {
    $r=ldap_bind($ds);
    $sr=ldap_search($ds,"ou=People,o=Cornell University,c=US", "uid=$netid", $return_fields);

    if ($entries = ldap_get_entries($ds, $sr)) {
      $output = array();
      for ($i=0; $i < count($return_fields); $i++) {
        $attr_name = $entries[0][$i];
        if ($attr_name != '') {
          $value = $entries[0][$attr_name][0];
          $output[$attr_name] = $value;
        }
      }
    }

    ldap_close($ds);
  } else {
    watchdog('cul_common (LDAP data)', 'Could not connect to LDAP server', array(), WATGHDOG_ERROR);
  }
  return $output;
}

/**
 * Call get_ldap_data() via URL, return JSON.
 * 
 */
function get_ldap_json() {
  $return_fields = NULL;
  if (isset($_GET['return_fields'])) {
    $return_fields = urldecode($_GET['return_fields']);  
  }
  drupal_json(get_ldap_data($return_fields));
}

