<?php
// $Id$
/**
 * @file
 * API of commonly needed services, like centralized authentication.
 *
 * @todo externalize strings, manage in drupal admin screens
 * 
 */

/**
 * Implementation of hook_help()
 */
function cul_common_help($path, $arg) {
    if ($path == 'admin/help#cul_common') {
        $txt = 'API of commonly needed services, like centralized authentication.';
    }
    return '<p>' . t($txt) . '</p>';
}

/**
 * Don't bother admins or various content managers with authentication
 * when they are already authenticated with Drupal.
 */
function can_bypass_auth($roles = NULL) {
  if ($roles == NULL || ! is_array($roles)) {
    $roles = array('administrator', 'content manager', 'webvision-admin');
  }

  $can_bypass = FALSE;
  global $user;

  if (is_array($user->roles)) {
    foreach ($roles as $role) {
      if (in_array($role, array_values($user->roles))) {
        $can_bypass = TRUE;
        break;
      }
    }
  }

  return $can_bypass;
}


/**
 * Basic authentication method, redirects to a CUWebAuth protected directory,
 * and upon successful authentication, it will set a 'netid' cookie.
 */
function cu_authenticate() {
  if (isset($_COOKIE['netid'])) {
    return $_COOKIE['netid'];
  } else {
    $base_path = 'basepath=' . base_path() . '&';
    drupal_goto('http://'. $_SERVER['HTTP_HOST'] . base_path() . drupal_get_path('module', 'cul_common') . '/authenticate' , $base_path . drupal_get_destination());
  }
}

/**
 * Implementation of hook_form_alter()
 */
function cul_common_form_alter(&$form, $form_state, $form_id) {
  if (isset($form['#node'])) {
      $node = $form['#node'];
      $form['cuwebauth'] = array (
        '#type' => 'checkbox',
        '#title' => 'Require CUWebLogin?',
        '#default_value' => isset($node->cuwebauth) ? $node->cuwebauth : 0,
        '#weight' => -10,
      );
  }
}

function get_cuwebauth($node) {
    return db_result(db_query('SELECT nid FROM {cuwebauth} where nid = (%d)', $node->nid));
}

function manage_cuwebuath($node) {
   $cuwebauth = get_cuwebauth($node);
   if ($node->cuwebauth && ! $cuwebauth) {
     db_query('INSERT INTO {cuwebauth} (nid) VALUES (%d)', $node->nid); 
   } else if (! $node->cuwebauth && $cuwebauth) {
     db_query('DELETE FROM {cuwebauth} WHERE nid = %d', $node->nid);
   }
}

/**
 * Implementation of hook_nodeapi().
 *
 * We will implement several node API operations here. This hook allows us to
 * act on all major node operations, so we can manage our additional data
 * appropriately.
 */
function cul_common_nodeapi(&$node, $op, $teaser, $page) {
  switch ($op) {
    // Now we need to take care of loading one of the extended nodes from the
    // database. An array containing our extra field needs to be returned.
    case 'load':
      return array('cuwebauth' => get_cuwebauth($node));
      break;

    // Insert is called after the node has been validated and saved to the
    // database. It gives us a chance to create our own record in the database.
    case 'insert':
      manage_cuwebuath($node);
      break;

    // Update is called when an existing node has been changed. Here, we use a
    // DELETE then an INSERT rather than an UPDATE. The reason is that a node
    // created before this module was installed won't already have a rating
    // saved so there would be nothing to update.
    case 'update':
      manage_cuwebuath($node);
      break;

    // Delete is called whn the node is being deleted, it gives us a chance
    // to delete the rating too.
    case 'delete':
      manage_cuwebuath($node);
      break;
      
    case 'view':
      if (get_cuwebauth($node) && ! isset($_COOKIE['netid']) && ! can_bypass_auth()) {
        cu_authenticate();
      } 
      break;
  }
}

/**
 * Convert a PHP array to JSON, reusable across services.
 */
function _array_to_json($input) {
  $output = '{';
  foreach ($input as $key => $value) {
    $output .=  '"' . $key . '": "' . $value . '", ';   
  }
  $output .=  "}\n";
  return $output;
}

/**
 * Given a CU Net ID, retrieve patron information from Voyager.
 */
function get_voyager_patron_info($format='php_array') { 
  $output = NULL;
  if ($conn = oci_connect("dbread", "dbread", "//lib22-c.library.cornell.edu:1521/VGER")) {
    $netid  = cu_authenticate();
    $email  = $netid . '@cornell.edu';
    $query = "SELECT pb.patron_barcode,p.last_name, p.first_name, p.patron_id 
              FROM patron_barcode pb, patron_address pa, patron p 
              WHERE pa.address_line1 = :netid 
              AND pb.barcode_status = 1 
              AND pb.patron_id = pa.patron_id 
              AND pb.patron_id = p.patron_id";
    $stid = oci_parse($conn, $query);
    oci_bind_by_name($stid, ":netid", $email);
    oci_define_by_name($stid, "PATRON_ID", $pid);
    oci_define_by_name($stid, "PATRON_BARCODE", $bc);
    oci_define_by_name($stid, "LAST_NAME", $last);
    oci_define_by_name($stid, "FIRST_NAME", $given);
    
    if (!oci_execute($stid, OCI_DEFAULT)) {
      $err = oci_error($stid);
      $message = 'ERROR : query failed: ' . $err['message'];
      watchdog('cul_common (voyager patron info)', $message, array(), WATGHDOG_ERROR);
    }
    
    $results = array();
    while (oci_fetch($stid)) {
      $results['netid'] = $netid;
      $results['pid'] = $pid;
      $results['bc'] = $bc;
      $results['last'] = $last;
      $results['given'] = $given;
    }
        
    if ($format == 'php_array') {
      $output = $results;
    } else if ($format == 'json') {
      $output = _array_to_json($results);  
    }

  } else {
    $err = oci_error();
    $message = 'ERROR : Oracle could not establish a connection: ' . $err['message'];
    watchdog('cul_common (voyager patron info)', $message, array(), WATGHDOG_ERROR);
  }
  return $output;
}

function get_ldap_data($returnFields = NULL, $format='php_array') {
  $netid = cu_authenticate();
  $output = NULL;

  if ($returnFields == NULL) {
    $returnFields = array('eduPersonPrimaryAffiliation',
                          'cornellEduAcadCollege',
                          'givenName',
                          'sn',
                          'cornellEduCampusAddress',
                          'cornellEduCampusPhone',
                          'Mail',
                         );
  }

  if ($ds=ldap_connect("directory.cornell.edu")) {
    $r=ldap_bind($ds);
    $sr=ldap_search($ds,"ou=People,o=Cornell University,c=US", "uid=$netid", $returnFields);

    if ($entries = ldap_get_entries($ds, $sr)) {
      $results = array();
      for ($i=0; $i < count($returnFields); $i++) {
        $attr_name = $entries[0][$i];
        if ($attr_name != '') {
          $value = $entries[0][$attr_name][0];
          $results[$attr_name] = $value;
        }
      }

      if ($format == 'php_array') {
        $output = $results;
      } else if ($format == 'json') {
        $output = _array_to_json($results);
      }
    }

    ldap_close($ds);
  } else {
    watchdog('cul_common (LDAP data)', 'Could not connect to LDAP server', array(), WATGHDOG_ERROR);
  }
  return $output;
}