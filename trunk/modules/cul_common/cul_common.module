<?php
// $Id$
/**
 * @file
 * API of commonly needed services, like centralized authentication.
 */

/**
 * Implementation of hook_help()
 */
function cul_common_help($path, $arg) {
    if ($path == 'admin/help#cul_common') {
        $txt = 'API of commonly needed services, like centralized authentication.';
    }
    return '<p>' . t($txt) . '</p>';
}

/**
 * Basic authentication method, redirects to a CUWebAuth protected directory,
 * and upon successful authentication, it will set a 'netid' cookie.
 */
function cu_authenticate() {
  if (isset($_COOKIE['netid'])) {
    return $_COOKIE['netid'];
  } else {
    $base_path = 'basepath=' . base_path() . '&';
    drupal_goto('http://'. $_SERVER['HTTP_HOST'] . base_path() . drupal_get_path('module', 'cul_common') . '/authenticate' , $base_path . drupal_get_destination());
  }
}

/**
 * Implementation of hook_form_alter()
 */
function cul_common_form_alter(&$form, $form_state, $form_id) {
  if (isset($form['#node'])) {
      $node = $form['#node'];
      $form['cuwebauth'] = array (
        '#type' => 'checkbox',
        '#title' => 'Require CUWebLogin?',
        '#default_value' => isset($node->cuwebauth) ? $node->cuwebauth : 0,
        '#weight' => -10,
      );
  }
}

function get_cuwebauth($node) {
    return db_result(db_query('SELECT nid FROM {cuwebauth} where nid = (%d)', $node->nid));
}

function manage_cuwebuath($node) {
   $cuwebauth = get_cuwebauth($node);
   if ($node->cuwebauth && ! $cuwebauth) {
     db_query('INSERT INTO {cuwebauth} (nid) VALUES (%d)', $node->nid); 
   } else if (! $node->cuwebauth && $cuwebauth) {
     db_query('DELETE FROM {cuwebauth} WHERE nid = %d', $node->nid);
   }
}

/**
 * Implementation of hook_nodeapi().
 *
 * We will implement several node API operations here. This hook allows us to
 * act on all major node operations, so we can manage our additional data
 * appropriately.
 */
function cul_common_nodeapi(&$node, $op, $teaser, $page) {
  switch ($op) {
    // Now we need to take care of loading one of the extended nodes from the
    // database. An array containing our extra field needs to be returned.
    case 'load':
      return array('cuwebauth' => get_cuwebauth($node));
      break;

    // Insert is called after the node has been validated and saved to the
    // database. It gives us a chance to create our own record in the database.
    case 'insert':
      manage_cuwebuath($node);
      break;

    // Update is called when an existing node has been changed. Here, we use a
    // DELETE then an INSERT rather than an UPDATE. The reason is that a node
    // created before this module was installed won't already have a rating
    // saved so there would be nothing to update.
    case 'update':
      manage_cuwebuath($node);
      break;

    // Delete is called whn the node is being deleted, it gives us a chance
    // to delete the rating too.
    case 'delete':
      manage_cuwebuath($node);
      break;
      
    case 'view':
      if (get_cuwebauth($node) && ! isset($_COOKIE['netid'])) {
        cu_authenticate();
      } 
      break;
  }
}




