<?php
// $Id$
/**
 * @file
 * API of commonly needed services, like centralized authentication.
 *
 * @todo externalize strings, manage in drupal admin screens
 *
 */

require_once(dirname(__FILE__) . '/helpers/cuwebauth.php');
require_once(dirname(__FILE__) . '/helpers/voyager.php');
require_once(dirname(__FILE__) . '/helpers/ldap.php');
require_once(dirname(__FILE__) . '/helpers/json.php');

/**
 * Implementation of hook_init()
 * this implements the patch for panels on http://drupal.org/node/362065
 */
function cul_common_init() {
  // Make sure CUWebAuth is triggered properly
  // when the node_view is overwritten by the Panels module
  if (module_exists('panels') && 'node' == arg(0) && is_numeric(arg(1))) {
    $node = node_load(arg(1));
    if (FALSE !== $node) {
      cul_common_nodeapi($node, 'view', NULL, TRUE);
    }
  }
  drupal_set_html_head('<script src="https://embanner.univcomm.cornell.edu/OWC-emergency-banner.js"
type="text/javascript"> </script>');
  //drupal_add_js('https://embanner.univcomm.cornell.edu/OWC-emergency-banner.js', 'external');
}

/**
 * Implementation of hook_help()
 */
function cul_common_help($path, $arg) {
	$txt = '';
    if ($path == 'admin/help#cul_common') {
        $txt = 'API of commonly needed services, like centralized authentication.';
    }
    return '<p>' . t($txt) . '</p>';
}

/**
 * Implementation of hook_menu()
 */
function cul_common_menu() {
  $items['cul_common.voyager'] = array(
    'title' => 'Voyager Patron Data',
    'page callback' => 'get_voyager_patron_json',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['cul_common.ldap'] = array(
    'title' => 'LDAP Patron Data',
    'page callback' => 'get_ldap_json',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['cul_common.logout'] = array(
    'title' => 'CUWebAuth Logout',
    'page callback' => 'cuwebauth_logout_from_url',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}


/**
 * Implementation of hook_form_alter()
 */
function cul_common_form_alter(&$form, $form_state, $form_id) {
  if (isset($form['#node']) && can_set_auth()) {
      $node = $form['#node'];
      $form['cuwebauth'] = array (
        '#type' => 'checkbox',
        '#title' => 'Require CUWebLogin?',
        '#default_value' => isset($node->cuwebauth) ? $node->cuwebauth : 0,
        '#weight' => -10,
      );
  }
}

/**
 * Implementation of hook_nodeapi().
 *
 * We will implement several node API operations here. This hook allows us to
 * act on all major node operations, so we can manage our additional data
 * appropriately.
 *
 * NOTE: this does not address how protected content in search results and RSS
 * feeds should be handled, and this should be updated once we decide how those
 * should be handled. See http://api.drupal.org/api/function/hook_nodeapi for
 * the $op values of "rss item" and "search result".
 */
function cul_common_nodeapi(&$node, $op, $teaser, $page) {
  switch ($op) {
    case 'load':
      return array('cuwebauth' => get_cuwebauth($node));
      break;
    case 'insert':
      manage_cuwebuath($node);
      break;
    case 'update':
      manage_cuwebuath($node);
      break;
    case 'delete':
      manage_cuwebuath($node);
      break;
    case 'view':
      if ((! can_bypass_auth()) && get_cuwebauth($node)) {
        cu_authenticate();
      }
      break;
  }
}

/**
 * Implementation of hook_mail_alter().
 * I could not find the mail_id as being passed to me.
 */

function cul_common_mail_alter(&$message) {
    if ($message['id'] == 'webform_submission') {
      $message['subject'] = $message['subject'] . ' from ' .$message['headers']['From'] ;
      $message['headers']['Reply-To'] = $message['headers']['From'];
    }
 }

function cul_common_cron() {
  get_and_set_cuwa_secret(TRUE);
}

